let map =
	[
		['&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&'],
		['&', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '0', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '.', '#', '.', '#', '#', '.', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '#', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '&'],
		['&', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '0', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '&'],
		['&', '.', '.', '.', '.', '#', '.', '%', '%', '%', '%', '.', '#', '#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '0', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '&'],
		['&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '.', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&']
	];

let mapWidth = map[0].length;
let mapHeight = map.length;

let playerX = mapWidth / 2.0;
let playerY = mapHeight / 2.0;
let playerAngle = 0.0;
let fov = 3.14159 / 4.0;
let depth = 16;

function setup() {
	if(canvas.getContext) {
		createCanvas(window.innerWidth, window.innerHeight);
	} else {
		document.querySelector("#noSupport").classList.toggle("hide");
	}
	noStroke();
}

function draw() {
	let cosAngle = Math.cos(playerAngle);
	let sinAngle = Math.sin(playerAngle);
	background(0);
	Controls(cosAngle, sinAngle);
	RayCaster(cosAngle, sinAngle);
}

function windowResized() {
  	resizeCanvas(window.innerWidth, window.innerHeight);
}

function Controls(cosAngle, sinAngle) {
	let speed = 3.5 * (deltaTime / 1000);
	let turnSpeed = 2.5 * (deltaTime / 1000);
	let forwardX = 0;
	let forwardY = speed;
	let rotForwardX = cosAngle * forwardX - sinAngle * forwardY;
	let rotForwardY = sinAngle * forwardX + cosAngle * forwardY;
	let rightX = speed;
	let rightY = 0;
	let rotRightX = cosAngle * rightX - sinAngle * rightY;
	let rotRightY = sinAngle * rightX + cosAngle * rightY;

	if(keyIsDown(87)) {
		playerY += rotForwardY;
		playerX += rotForwardX;
	}
	if(keyIsDown(65)) {
		playerY -= rotRightY;
		playerX -= rotRightX;
	}
	if(keyIsDown(83)) {
		playerY -= rotForwardY;
		playerX -= rotForwardX;
	}
	if(keyIsDown(68)) {
		playerY += rotRightY;
		playerX += rotRightX;
	}
	if(keyIsDown(LEFT_ARROW)) {
		playerAngle += turnSpeed;
	}
	if(keyIsDown(RIGHT_ARROW)) {
		playerAngle -= turnSpeed;
	}
}

function RayCaster(cosAngle, sinAngle) {
	let punktY = depth;
	let startX = -punktY;
	let slutX = punktY;
	let rayOrdning = 0;
	let deltaX = slutX - startX;

	for(let x = startX; x < slutX; x += deltaX / window.innerWidth) {
		rayOrdning++;
		let rayLutning = x / punktY;
		let y = 0.0;

		while(y < punktY) {
			let rayX = rayLutning * y;
			let rayY = y;
			let roteradRayX = cosAngle * rayX - sinAngle * rayY + playerX;
			let roteradRayY = sinAngle * rayX + cosAngle * rayY + playerY;
			y += 0.02;

			if(roteradRayX >= 0 && roteradRayX < mapWidth && roteradRayY >= 0 && roteradRayY < mapHeight) {
				if(map[Math.floor(roteradRayY)][Math.floor(roteradRayX)] != '.') {
					//console.log("pip");
					let avståndPlayerVägg = y;
					let kollumnLängd = window.innerHeight / avståndPlayerVägg;
					let kollumnStartY = window.innerHeight / 2 - kollumnLängd / 2;
					let kollumnSlutY = kollumnStartY + kollumnLängd;

					if(kollumnSlutY > window.innerHeight) {
						kollumnSlutY = window.innerHeight;
					}
					if(kollumnStartY < 0) {
						kollumnStartY = 0;
					}
					let c = [255, 255, 255];
					switch(map[Math.floor(roteradRayY)][Math.floor(roteradRayX)]) {
						case '&': c = [161, 98, 56]; break;
						case '%': c = [130, 130, 130]; break;
						case '0': c = [72, 212, 205]; break;
					}
					fill(c[0] / (avståndPlayerVägg * 0.5 + 1), c[1] / (avståndPlayerVägg * 0.5 + 1), c[2] / (avståndPlayerVägg * 0.5 + 1));
					/*for(let i = kollumnStartY; i < kollumnSlutY; i++) {
						point(rayOrdning, i);
					}*/
					rect(rayOrdning, kollumnStartY, 1, kollumnLängd);
					break;
				}
			}
		}
	}
	//console.log("frame, " + playerX + " " + playerY + " " + deltaTime);
}